Elapsed Time: 9.094s
    Paused Time: 0s
Effective CPU Utilization: 18.6% (7.423 out of 40 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Total Thread Count: 16
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.000s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                 Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        --------------------------  -----------------------------------  ----------------------------  ----------
        Stream example7 0x2c4a38ac                               0.000s                        100.0%           1
        Stream 0xe1696717                                        0.000s                        100.0%           3
    Spin and Overhead Time: 74.890s (52.6% of CPU Time)
     | When synchronization objects are used inside a parallel region, threads
     | can spend CPU time waiting on a lock release, contending with other
     | threads for a shared resource. Where possible, reduce synchronization by
     | using reduction or atomic operations, or minimize the amount of code
     | executed inside the critical section.
     |

        Top Functions with Spin or Overhead Time
        Function                    Module        Spin and Overhead Time  (% from CPU Time)(%)
        --------------------------  ------------  ----------------------  --------------------
        gomp_mutex_lock_slow        libgomp.so.1                 74.770s                 52.5%
        gomp_barrier_wait_end       libgomp.so.1                  0.070s                  0.0%
        gomp_team_barrier_wait_end  libgomp.so.1                  0.050s                  0.0%
Collection and Platform Info
    Application Command Line: ./NFA_par "example7" 
    Operating System: 3.10.0-514.el7.x86_64 NAME="CentOS Linux" VERSION="7 (Core)" ID="centos" ID_LIKE="rhel fedora" VERSION_ID="7" PRETTY_NAME="CentOS Linux 7 (Core)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:centos:centos:7" HOME_URL="https://www.centos.org/" BUG_REPORT_URL="https://bugs.centos.org/"  CENTOS_MANTISBT_PROJECT="CentOS-7" CENTOS_MANTISBT_PROJECT_VERSION="7" REDHAT_SUPPORT_PRODUCT="centos" REDHAT_SUPPORT_PRODUCT_VERSION="7" 
    Computer Name: s208
    Result Size: 6 MB 
    Collection start time: 17:10:31 15/01/2025 UTC
    Collection stop time: 17:10:41 15/01/2025 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Skylake
        Frequency: 2.394 GHz 
        Logical CPU Count: 40

If you want to skip descriptions of detected performance issues in the report,
enter: amplxe-cl -report summary -report-knob show-issues=false -r
<my_result_dir>. Alternatively, you may view the report in the csv format:
amplxe-cl -report <report_name> -format=csv.
Function  Module  Function (Full)  Source File
--------  ------  ---------------  -----------
